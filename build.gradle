import io.github.fvarrui.javapackager.gradle.PackageTask

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.7.5'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.jetbrains.kotlin.jvm'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'


group 'indi.lt.serialtool'
version '1.0.0'

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
    versions = [
            'jfx': '21.0.3'
    ]
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'indi.lt.serialtool.Main'
}

javafx {
    version = "${versions.jfx}"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation('io.github.nonoas:jfx-flat-ui:1.0.2')
    implementation('com.fazecast:jSerialComm:2.10.4')
    implementation('org.apache.logging.log4j:log4j-core:2.20.0')
    implementation 'com.h2database:h2:2.2.220'
    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'
    implementation "org.fxmisc.richtext:richtextfx:0.11.1"

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

test {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': application.mainClass.get()
    }
}

tasks.register('packageMyApp', PackageTask) {
    dependsOn clean, jar
    // mandatory
    mainClass = application.mainClass.get()
    // optional
    modules = ["java.base", "java.management", "java.net.http", "java.scripting", "java.sql",
               "java.naming",
               "jdk.jsobject", "jdk.unsupported", "jdk.unsupported.desktop", "jdk.xml.dom",
               // 这个模块没有的话，访问不了https
               "jdk.crypto.ec"
    ]
    bundleJre = true
    generateInstaller = false
    // 是否需要管理员权限
    administratorRequired = false
    winConfig { createZipball = true }

}